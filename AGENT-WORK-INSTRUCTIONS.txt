These are instructions on how you should perform your work.  Follow these instructions carefully and make sure to stop and prompt me for input if any of these items are unclear or you are stuck.  Pay special attention to the instructions on when to prompt me if you're stuck.
1. Step 1: Clarify requirements
Please read through my requirement and ask to clarify any ambiguities or provide any details you feel are missing.  You should stop and prompt me with any questions, or ask to proceed. 
2. Step 2: Create feature journal
Create a document in the project history folder with an appropriate name that matches what is being requested.  This document will act as your work journal so you can document your overall plan and remember steps that you have performed, so you don’t forget.  
3. Step 3: Analysis
Read through the project README and associated project documentation.   Make sure to try understand the overall project structure and files, and the details you will need to understand the requirement and how to validate the changes you make are correct.  Try to thoroughly understand the requirement.  If more questions come up during your analysis, make sure to update the requirement with your understanding and check with me if the requirement clarification is correct.  You should also consider to review the previous project journals committed to understand.  Make sure to review the KEY_FINDINGS.md in the project root (if it exists), since it’s your place to store key information for later use.   If you have further questions or need for clarification, you should prompt and wait for my feedback prior to responding.  
4. Step 4: Create your plan
Create a step by step plan that breaks your work into small, discrete, clean units of work.  You should track this in your journal.  Each step should have a clear set of actions that you need to perform, and clear way you can validate your changes are correct.  If any step is dependent on another step, make sure that is clearly noted.  Order the steps to make logical sense if they are dependent on one another.  If a step is not dependent, make sure its clear, because may you can work on that step if you get stuck in another one. I don’t need to review the plan.  Just assume that you can proceed, but make sure to keep it in your journal
5. Step 5: Implementation
Create a new branch in git for your work.  Proceed through your planned steps in sequence.  For each step, make sure you document that you started it in your journal and update your journal as you progress.  You should note in your journal if you fail a step and why.  If you fail 3 times on that step, you should stop and ask me for help before proceeding.  You can ask me to help, or suggest that you work on a different step that has no dependencies.  When you complete a step, you should update your project journal, then commit all your changes to git with a clear and concise commit message on what you did.  You should utilize unit tests as much as possible in your validation process.  Finally, make sure your code is properly documented before committing.  
6. Step 6: Validation
You should make sure to fully test at the end of the implementation step.  Make sure to document your testing in your journal.  Make sure to record if you have failed to validate, and if you have failed 3 times, prompt me for help again.  Its suggested that you change your test approach a max of 3 times before trying to go back and change the code to fix your issues.  If you need to make changes, you should update your journal with the steps you will do to do the fix and follow the same procedure in the Implementation step.
7. Step 8: Record key findings
You should record key findings in the file “KEY_FINDINGS.md” in the project root.  You should create this file if it does not exist.  You will refer to this later when doing work in the future.  If the file is getting too long, such as over 4 pages of text, you should consolidate findings to ensure it’s not too lengthy.  
8. Step 8: Push your changes
When you are confident of your fix, document it in your journal.  Then create your final commit and then make a pull request and push It to the repository.  Make sure you provide a very clear PR message that outlines what you did, but make it not too detailed.  The PR reviewer can always review your journal to understand what you did.  
