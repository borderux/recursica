import { Tokens } from "../shared/tokens";
import type { ExportingResult } from "../types";
import { autoGeneratedFile } from "@recursica/common";
import { tokensToJsBlock, TOKEN_CONFIGS } from "../utils/tokenToCss";

export function generateRecursicaObject(
  { tokens, uiKit, themes }: Tokens,
  outputPath: string,
): ExportingResult {
  const recursicaObjectFilename = "recursica.js";
  const recursicaObjectPath = outputPath + "/" + recursicaObjectFilename;

  // Generate tokens object using abstracted logic
  const tokensEntries = tokensToJsBlock(tokens, TOKEN_CONFIGS.BASIC_TOKENS);

  // Generate UI Kit object using abstracted logic
  const uiKitEntries = tokensToJsBlock(uiKit, TOKEN_CONFIGS.UI_KIT_TOKENS);

  // Generate themes object using abstracted logic
  const themesEntries = Object.entries(themes)
    .map(([themeName, themeModes]) => {
      const modeEntries = Object.entries(
        themeModes as Record<string, Record<string, any>>,
      )
        .map(([mode, variables]) => {
          // Generate theme variables with proper indentation using custom logic
          const themeVariables = Object.entries(
            variables as Record<string, any>,
          )
            .map(([key, value]) => {
              const cssVarName = key.replace(/[\/\s]/g, "-").toLowerCase();

              // Handle token references (objects with collection and name)
              if (
                typeof value === "object" &&
                value !== null &&
                "collection" in value &&
                "name" in value
              ) {
                const ref = value as { collection: string; name: string };
                const refVarName = ref.name
                  .replace(/[\/\s]/g, "-")
                  .toLowerCase();
                return `      "${key}": "var(--${refVarName})"`;
              }

              // Handle direct values
              if (typeof value === "string" || typeof value === "number") {
                return `      "${key}": "var(--${cssVarName})"`;
              }

              return null;
            })
            .filter(Boolean)
            .join(",\n");

          return `    "${mode}": {\n${themeVariables}\n    }`;
        })
        .join(",\n");

      return `  "${themeName}": {\n${modeEntries}\n  }`;
    })
    .join(",\n");

  const recursicaObjectContent = `${autoGeneratedFile()}
/**
 * Recursica Design System Lookup Object
 * 
 * This object provides type-safe access to all CSS custom properties
 * generated from your design tokens. Use it to style components programmatically.
 * 
 * Example usage:
 * style={{ backgroundColor: recursica.tokens["color/primary/500"] }}
 * style={{ padding: recursica.uiKit["button/size/padding"] }}
 * style={{ color: recursica.themes.light["text/primary"] }}
 */

export const recursica = {
  tokens: {
${tokensEntries}
  },
  uiKit: {
${uiKitEntries}
  },
  themes: {
${themesEntries}
  }
};

export default recursica;
`;

  return {
    content: recursicaObjectContent,
    path: recursicaObjectPath,
    filename: recursicaObjectFilename,
  };
}
