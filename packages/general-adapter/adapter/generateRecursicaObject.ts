import { Tokens } from "../shared/tokens";
import type { ExportingResult } from "../types";
import { autoGeneratedFile } from "@recursica/common";
import { tokensToJsBlock, TOKEN_CONFIGS } from "../utils/tokenToCss";

export function generateRecursicaObject(
  { tokens, uiKit, themes }: Tokens,
  outputPath: string,
): ExportingResult {
  const recursicaObjectFilename = "recursica.js";
  const recursicaObjectPath = outputPath + "/" + recursicaObjectFilename;

  // Generate tokens object using abstracted logic
  const tokensEntries = tokensToJsBlock(tokens, TOKEN_CONFIGS.BASIC_TOKENS);

  // Generate UI Kit object using abstracted logic
  const uiKitEntries = tokensToJsBlock(uiKit, TOKEN_CONFIGS.UI_KIT_TOKENS);

  const themesEntries: Record<string, string> = {};
  // Generate themes object using abstracted logic
  for (const modes of Object.values(themes)) {
    for (const variable of Object.values(modes)) {
      for (const [key] of Object.entries(variable)) {
        const cssVarName = key.replace(/[\/\s]/g, "-").toLowerCase();
        themesEntries[key] = `var(--${cssVarName})`;
      }
    }
  }

  const recursicaObjectContent = `${autoGeneratedFile()}
/**
 * Recursica Design System Lookup Object
 * 
 * This object provides type-safe access to all CSS custom properties
 * generated from your design tokens. Use it to style components programmatically.
 * 
 * Example usage:
 * style={{ backgroundColor: recursica.tokens["color/primary/500"] }}
 * style={{ padding: recursica.uiKit["button/size/padding"] }}
 * style={{ color: recursica.themes.light["text/primary"] }}
 */

export const recursica = {
  tokens: {
${tokensEntries}
  },
  uiKit: {
${uiKitEntries}
  },
  themes: {
${Object.entries(themesEntries)
  .map(([key, value]) => `  "${key}": "${value}"`)
  .join(",\n")}
  }
};

export default recursica;
`;

  return {
    content: recursicaObjectContent,
    path: recursicaObjectPath,
    filename: recursicaObjectFilename,
  };
}
