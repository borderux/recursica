import { Tokens } from "../shared/tokens";
import type { ExportingResult } from "../types";
import { autoGeneratedFile } from "@recursica/common";

/**
 * Processes the themes object in a single iteration to extract all unique token keys.
 *
 * This function optimizes theme processing by avoiding multiple iterations over the same data.
 * It traverses the nested theme structure to collect all unique token keys that will be used
 * to generate TypeScript type definitions.
 *
 * @param themes - The themes object containing nested theme data structure:
 *   - Level 1: Theme names (e.g., "RecursicaBrand")
 *   - Level 2: Theme variants/modes (e.g., "Light", "Dark")
 *   - Level 3: Token keys (e.g., "palette/palette-1/400/high-emphasis")
 *
 * @returns Array of formatted token key strings ready for TypeScript type generation
 *
 * @example
 * Input themes object:
 * {
 *   "RecursicaBrand": {
 *     "Light": { "palette/palette-1/400/high-emphasis": "#000000", ... },
 *     "Dark": { "palette/palette-1/400/high-emphasis": "#ffffff", ... }
 *   }
 * }
 *
 * Output:
 * [
 *   '  "palette/palette-1/400/high-emphasis" |\n  "palette/palette-1/500/high-emphasis" |\n...',
 *   '  "spacing/small" |\n  "spacing/medium" |\n...'
 * ]
 */
function processThemesData(themes: Record<string, any>): string[] {
  const themeKeys: string[] = [];

  /**
   * Iterate through each theme (e.g., "RecursicaBrand")
   */
  Object.entries(themes).forEach(([, themeModes]) => {
    /**
     * Iterate through each theme variant/mode (e.g., "Light", "Dark")
     */
    Object.entries(themeModes as Record<string, any>).forEach(
      ([, variantTokens]) => {
        /**
         * Extract all token keys from this variant and format them for TypeScript
         */
        const variantTokenKeys = Object.keys(
          variantTokens as Record<string, any>,
        )
          .map((key) => `  "${key}"`) // Format as TypeScript string literal
          .join(" |\n"); // Join with union type syntax

        /**
         * Only add unique token key combinations to avoid duplicates
         */
        if (!themeKeys.includes(variantTokenKeys)) {
          themeKeys.push(variantTokenKeys);
        }
      },
    );
  });

  return themeKeys;
}

/**
 * Generates TypeScript type definitions for the Recursica design system.
 *
 * This function creates comprehensive TypeScript definitions that provide type safety
 * for accessing design tokens, UI Kit variables, and theme data. It processes the
 * themes object efficiently using a single iteration to extract all necessary data.
 *
 * @param tokens - Design tokens object containing key-value pairs
 * @param uiKit - UI Kit variables object
 * @param themes - Nested themes object with theme names, variants, and token keys
 * @param outputPath - Directory path where the generated .d.ts file will be saved
 * @returns ExportingResult containing the generated content and file information
 */
export function generateRecursicaTypes(
  { tokens, uiKit, themes }: Tokens,
  outputPath: string,
): ExportingResult {
  const recursicaTypesFilename = "recursica.d.ts";
  const recursicaTypesPath = outputPath + "/" + recursicaTypesFilename;

  /**
   * Generate token type keys - filter for primitive values only
   */
  const tokenKeys = Object.keys(tokens)
    .filter((key) => {
      const value = tokens[key];
      return typeof value === "string" || typeof value === "number";
    })
    .map((key) => `  "${key}"`)
    .join(" |\n");

  /**
   * Generate UI Kit type keys
   */
  const uiKitKeys = Object.keys(uiKit)
    .map((key) => `  "${key}"`)
    .join(" |\n");

  /**
   * Process themes data in a single optimized iteration
   * This extracts all unique token keys from the nested theme structure
   */
  const themeKeys = processThemesData(themes);

  /**
   * Generate the complete TypeScript definitions file content
   */
  const recursicaTypesContent = `${autoGeneratedFile()}
/**
 * Recursica Design System Type Definitions
 * 
 * Type-safe interfaces for accessing design tokens, UI Kit variables, and themes.
 * These types are automatically generated from your design tokens.
 */
/**
 * CSS Variable type (for direct CSS variable access)
 */
export type RecursicaCSSVariable = \`var(--\${string})\`;

/**
 * Token type definitions - union of all primitive token keys
 */
export type RecursicaToken = ${tokenKeys};

/**
 * UI Kit type definitions - union of all UI Kit variable keys
 */
export type RecursicaUiKit = ${uiKitKeys};

/**
 * Theme type definitions - union of all unique token keys across all themes
 */
export type RecursicaTheme = ${themeKeys.join("|\n")}

/**
 * Main recursica object type
 */
export interface Recursica {
  /**
   * Design tokens
   * @example
   * {
   *   "color/primary/500": "var(--color-primary-500)"
   * }
   */
  tokens: Record<RecursicaToken, RecursicaCSSVariable>;
  /**
   * UI Kit components
   * @example
   * {
   *   "button/size/padding": "var(--size-3x)"
   * }
   */
  uiKit: Record<RecursicaUiKit, RecursicaCSSVariable>;
  /**
   * Themes
   * @example
   * {
   *   "RecursicaBrand": {
   *     "Light": {
   *       "palette/neutral/100/tone": "var(--color-gray-800)"
   *     }
   *   }
   * }
   */
  themes: Record<string, Record<string, Record<RecursicaTheme, RecursicaCSSVariable>>>;
}

/**
 * Default export declaration
 */
declare const recursica: Recursica;
export { recursica };
export default recursica;
`;

  return {
    content: recursicaTypesContent,
    path: recursicaTypesPath,
    filename: recursicaTypesFilename,
  };
}
