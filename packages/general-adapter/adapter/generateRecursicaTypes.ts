import { Tokens } from "../shared/tokens";
import type { ThemeTokens, ExportingProps, ExportingResult } from "../types";
import { autoGeneratedFile } from "@recursica/common";

export function generateRecursicaTypes(
  { tokens, uiKit, themes }: Tokens,
  outputPath: string,
): ExportingResult {
  const recursicaTypesFilename = "recursica.d.ts";
  const recursicaTypesPath = outputPath + "/" + recursicaTypesFilename;

  // Generate token type keys
  const tokenKeys = Object.keys(tokens)
    .filter((key) => {
      const value = tokens[key];
      return typeof value === "string" || typeof value === "number";
    })
    .map((key) => `  "${key}"`)
    .join(" |\n");

  // Generate UI Kit type keys
  const uiKitKeys = Object.keys(uiKit)
    .map((key) => `  "${key}"`)
    .join(" |\n");

  // Generate theme type keys
  const themeKeys = Object.keys(themes)
    .map((key) => `  "${key}"`)
    .join(" |\n");

  // Generate individual theme variant type keys
  const individualThemeTypes = Object.entries(themes)
    .map(([themeName, themeVariants]) => {
      const themeVariantKeys = Object.keys(themeVariants as Record<string, any>)
        .map((key) => `  "${key}"`)
        .join(" |\n");

      return `export type RecursicaTheme${themeName.charAt(0).toUpperCase() + themeName.slice(1)} = ${themeVariantKeys};`;
    })
    .join("\n\n");

  // Generate theme variant token types
  const themeVariantTokenTypes = Object.entries(themes)
    .flatMap(([themeName, themeVariants]) =>
      Object.entries(themeVariants as Record<string, any>).map(
        ([variantName, variantTokens]) => {
          const variantTokenKeys = Object.keys(
            variantTokens as Record<string, any>,
          )
            .map((key) => `  "${key}"`)
            .join(" |\n");

          return `export type RecursicaTheme${themeName.charAt(0).toUpperCase() + themeName.slice(1)}${variantName.charAt(0).toUpperCase() + variantName.slice(1)} = ${variantTokenKeys};`;
        },
      ),
    )
    .join("\n\n");

  const recursicaTypesContent = `${autoGeneratedFile()}
/**
 * Recursica Design System Type Definitions
 * 
 * Type-safe interfaces for accessing design tokens, UI Kit variables, and themes.
 * These types are automatically generated from your design tokens.
 */

// Token type definitions
export type RecursicaToken = ${tokenKeys};

// UI Kit type definitions  
export type RecursicaUiKit = ${uiKitKeys};

// Theme type definitions
export type RecursicaTheme = ${themeKeys};

// Individual theme type definitions
${individualThemeTypes}

// Individual theme variant token type definitions
${themeVariantTokenTypes}

// Main recursica object type
export interface Recursica {
  tokens: Record<RecursicaToken, string>;
  uiKit: Record<RecursicaUiKit, string>;
  themes: RecursicaThemeMap;
}

// Theme map for individual theme types
export interface RecursicaThemeMap {
${Object.entries(themes)
  .map(([themeName, themeVariants]) => {
    const variantTypes = Object.keys(themeVariants as Record<string, any>)
      .map((variantName) => {
        const variantTypeName = `RecursicaTheme${themeName.charAt(0).toUpperCase() + themeName.slice(1)}${variantName.charAt(0).toUpperCase() + variantName.slice(1)}`;
        return `    "${variantName}": Record<${variantTypeName}, string>;`;
      })
      .join("\n");

    return `  "${themeName}": {
${variantTypes}
  };`;
  })
  .join("\n")}
}

// CSS Variable type (for direct CSS variable access)
export type RecursicaCSSVariable = \`var(--\${string})\`;

// Default export declaration
declare const recursica: Recursica;
export { recursica };
export default recursica;
`;

  return {
    content: recursicaTypesContent,
    path: recursicaTypesPath,
    filename: recursicaTypesFilename,
  };
}
