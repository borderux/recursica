import type { ThemeTokens, ExportingProps, ExportingResult } from "../types";
import { autoGeneratedFile } from "@recursica/common";

export function generateRecursicaTypes(
  tokens: ThemeTokens,
  uiKit: ThemeTokens,
  themes: Record<string, any>,
  { outputPath }: ExportingProps,
): ExportingResult {
  const recursicaTypesFilename = "recursica.d.ts";
  const recursicaTypesPath = outputPath + "/" + recursicaTypesFilename;

  // Generate token type keys
  const tokenKeys = Object.keys(tokens)
    .filter((key) => {
      const value = tokens[key];
      return typeof value === "string" || typeof value === "number";
    })
    .map((key) => `  "${key}"`)
    .join(" |\n");

  // Generate UI Kit type keys
  const uiKitKeys = Object.keys(uiKit)
    .map((key) => `  "${key}"`)
    .join(" |\n");

  // Generate theme type keys
  const themeKeys = Object.keys(themes)
    .map((key) => `  "${key}"`)
    .join(" |\n");

  // Generate individual theme type keys
  const individualThemeTypes = Object.entries(themes)
    .map(([themeName, themeTokens]) => {
      const themeTokenKeys = Object.keys(themeTokens as Record<string, any>)
        .map((key) => `    "${key}"`)
        .join(" |\n");

      return `export type RecursicaTheme${themeName.charAt(0).toUpperCase() + themeName.slice(1)} = 
${themeTokenKeys};`;
    })
    .join("\n\n");

  const recursicaTypesContent = `${autoGeneratedFile()}
/**
 * Recursica Design System Type Definitions
 * 
 * Type-safe interfaces for accessing design tokens, UI Kit variables, and themes.
 * These types are automatically generated from your design tokens.
 */

// Token type definitions
export type RecursicaToken = 
${tokenKeys};

// UI Kit type definitions  
export type RecursicaUiKit = 
${uiKitKeys};

// Theme type definitions
export type RecursicaTheme = 
${themeKeys};

// Individual theme type definitions
${individualThemeTypes}

// Main recursica object type
export interface Recursica {
  tokens: Record<RecursicaToken, string>;
  uiKit: Record<RecursicaUiKit, string>;
  themes: {
    [K in RecursicaTheme]: K extends keyof RecursicaThemeMap 
      ? RecursicaThemeMap[K] 
      : Record<string, string>;
  };
}

// Theme map for individual theme types
export interface RecursicaThemeMap {
${Object.entries(themes)
  .map(
    ([themeName]) =>
      `  "${themeName}": Record<RecursicaTheme${themeName.charAt(0).toUpperCase() + themeName.slice(1)}, string>;`,
  )
  .join("\n")}
}

// CSS Variable type (for direct CSS variable access)
export type RecursicaCSSVariable = \`var(--\${string})\`;
`;

  return {
    content: recursicaTypesContent,
    path: recursicaTypesPath,
    filename: recursicaTypesFilename,
  };
}
