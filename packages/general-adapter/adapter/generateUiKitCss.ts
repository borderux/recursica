import { Tokens } from "../shared/tokens";
import type { ExportingResult } from "../types";
import { autoGeneratedFile } from "@recursica/common";

export function generateUiKitCss(
  { uiKit, themes }: Tokens,
  outputPath: string,
): ExportingResult {
  const uiKitCssFilename = "recursica.css";
  const uiKitCssPath = outputPath + "/" + uiKitCssFilename;

  // Generate imports for tokens and all themes
  const imports = [
    '@import "./recursica-tokens.css";',
    Object.entries(themes).map(([themeName, themeModes]) =>
      Object.keys(themeModes)
        .map(
          (modeName) =>
            `@import "./${themeName.toLowerCase()}-${modeName.toLowerCase()}-theme.css";`,
        )
        .join("\n"),
    ),
  ].join("\n");

  // Generate UI Kit variables content
  const cssVariables = Object.entries(uiKit)
    .map(([key, value]) => {
      const cssVarName = key.replace(/[\/\s]/g, "-").toLowerCase();

      // Handle token references (objects with collection and name)
      if (
        typeof value === "object" &&
        value !== null &&
        "collection" in value &&
        "name" in value
      ) {
        const tokenVarName = (value as { name: string }).name
          .replace(/[\/\s]/g, "-")
          .toLowerCase();
        return `  --${cssVarName}: var(--${tokenVarName});`;
      }

      // Handle string values that might be token references
      if (typeof value === "string" && value.includes("/")) {
        const tokenVarName = value.replace(/[\/\s]/g, "-").toLowerCase();
        return `  --${cssVarName}: var(--${tokenVarName});`;
      }

      // Handle direct values
      if (typeof value === "string" || typeof value === "number") {
        return `  --${cssVarName}: ${value};`;
      }

      // Skip other types
      return null;
    })
    .filter(Boolean)
    .join("\n");

  const uiKitCssContent = `${autoGeneratedFile()}
/* Recursica UI Kit */
${imports}

.recursica {
${cssVariables}
}
`;

  return {
    content: uiKitCssContent,
    path: uiKitCssPath,
    filename: uiKitCssFilename,
  };
}
