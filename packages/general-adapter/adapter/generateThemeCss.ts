import type {
  Themes,
  ExportingProps,
  ExportingResult,
  ValueToken,
} from "../types";
import { autoGeneratedFile } from "@recursica/common";

export function generateThemeCss(
  themes: Themes,
  { outputPath }: ExportingProps,
): ExportingResult[] {
  const themeFiles: ExportingResult[] = [];

  for (const [themeName, themeTokens] of Object.entries(themes)) {
    // Skip empty themes or non-object themes
    if (
      !themeTokens ||
      typeof themeTokens !== "object" ||
      Array.isArray(themeTokens)
    ) {
      continue;
    }

    const themeCssFilename = `${themeName.toLowerCase()}-theme.css`;
    const themeCssPath = outputPath + "/" + themeCssFilename;

    // Convert theme token names to CSS custom property format
    const cssVariables = Object.entries(themeTokens)
      .map(([key, value]) => {
        const cssVarName = key.replace(/\//g, "-").toLowerCase();

        // Handle different value types
        if (typeof value === "string" || typeof value === "number") {
          return `  --${cssVarName}: ${value};`;
        }

        // Handle object references (like { collection: "Tokens", name: "opacity/solid" })
        if (
          typeof value === "object" &&
          value !== null &&
          "collection" in value &&
          "name" in value
        ) {
          const ref = value as { collection: string; name: string };
          const refVarName = ref.name.replace(/\//g, "-").toLowerCase();
          return `  --${cssVarName}: var(--${refVarName});`;
        }

        return null;
      })
      .filter(Boolean)
      .join("\n");

    const themeCssContent = `${autoGeneratedFile()}
/* Recursica ${themeName} Theme */
.${themeName.toLowerCase()}-theme {
${cssVariables}
}
`;

    themeFiles.push({
      content: themeCssContent,
      path: themeCssPath,
      filename: themeCssFilename,
    });
  }

  return themeFiles;
}
