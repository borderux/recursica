import type { ExportingResult } from "../types";
import { Tokens } from "../shared/tokens";
import { autoGeneratedFile } from "@recursica/common";

export function generateThemeCss(
  { themes }: Tokens,
  outputPath: string,
): ExportingResult[] {
  const themeFiles: ExportingResult[] = [];

  for (const [themeName, themeModes] of Object.entries(themes)) {
    // Skip empty themes or non-object themes
    if (
      !themeModes ||
      typeof themeModes !== "object" ||
      Array.isArray(themeModes)
    ) {
      continue;
    }

    // Process each mode (Light, Dark, etc.) within the theme
    for (const [modeName, themeTokens] of Object.entries(themeModes)) {
      // Skip empty mode tokens or non-object mode tokens
      if (
        !themeTokens ||
        typeof themeTokens !== "object" ||
        Array.isArray(themeTokens)
      ) {
        continue;
      }

      const themeCssFilename = `${themeName.toLowerCase()}-${modeName.toLowerCase()}-theme.css`;
      const themeCssPath = outputPath + "/" + themeCssFilename;

      // Convert theme token names to CSS custom property format
      const cssVariables = Object.entries(themeTokens)
        .map(([key, value]) => {
          const cssVarName = key.replace(/[\/\s]/g, "-").toLowerCase();

          // Handle different value types
          if (typeof value === "string" || typeof value === "number") {
            return `  --${cssVarName}: ${value};`;
          }

          // Handle object references (like { collection: "Tokens", name: "opacity/solid" })
          if (
            typeof value === "object" &&
            value !== null &&
            "collection" in value &&
            "name" in value
          ) {
            const ref = value as { collection: string; name: string };
            const refVarName = ref.name.replace(/[\/\s]/g, "-").toLowerCase();
            return `  --${cssVarName}: var(--${refVarName});`;
          }

          return null;
        })
        .filter(Boolean)
        .join("\n");

      const themeCssContent = `${autoGeneratedFile()}
/* Recursica ${themeName} ${modeName} Theme */
.${themeName.toLowerCase()}-${modeName.toLowerCase()}-theme {
${cssVariables}
}
`;

      themeFiles.push({
        content: themeCssContent,
        path: themeCssPath,
        filename: themeCssFilename,
      });
    }
  }

  return themeFiles;
}
