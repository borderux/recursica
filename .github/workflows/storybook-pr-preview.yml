name: Deploy PR Preview

# This workflow builds and deploys Storybook previews for pull requests
# that have "preview" in the title. Each PR gets its own preview URL.
#
# PURPOSE:
# - Provides on-demand Storybook previews for pull requests
# - Allows developers to see UI changes in a live Storybook environment
# - Helps with visual testing and design review processes
#
# HOW TO USE:
# 1. Create a pull request targeting the main branch
# 2. Include the word "preview" (case insensitive) in the PR title
# 3. The workflow will automatically build and deploy a Storybook preview
# 4. A comment will be posted on the PR with the preview URL
# 5. Each new commit to the PR updates the preview automatically
#
# EXAMPLES OF TRIGGERING TITLES:
# - "Add new button component - preview"
# - "PREVIEW: Update theme colors"
# - "Fix layout issues (Preview)"
# - "Preview build for testing"
#
# PREREQUISITES:
# 1. GitHub Pages must be enabled in repository settings
#    (Settings → Pages → Source: GitHub Actions)
# 2. Repository must have Pages permissions enabled
# 3. The ui-kit-mantine package must have a working "build-storybook" script
#
# DEPLOYMENT:
# - Each PR gets a unique preview URL: https://[username].github.io/recursica/pr-preview/pr-[pr-number]/
# - Uses rossjrw/pr-preview-action for reliable PR preview deployment
# - Previews are automatically cleaned up when PRs are closed/merged
# - Uses GitHub Pages for hosting with automatic HTTPS
#
# CONCURRENCY:
# - Each PR has its own concurrency group to prevent conflicts
# - New commits cancel previous builds for the same PR
# - Main branch deployments use a separate concurrency group

on:
  # Trigger on pull requests targeting main branch
  # Note: Preview builds only run if PR title contains "preview"
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches: [main]
  # Allow manual triggering from GitHub Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow concurrent deployments for different PRs
concurrency: preview-${{ github.ref }}

jobs:
  # Deploy preview job: Builds and deploys Storybook previews
  # This job only runs if the PR title contains "preview" (case insensitive)
  deploy-preview:
    runs-on: ubuntu-latest
    # Conditional execution: Only build if PR title contains "preview"
    # This prevents unnecessary builds for regular PRs
    if: contains(github.event.pull_request.title, 'preview') || contains(github.event.pull_request.title, 'Preview') || contains(github.event.pull_request.title, 'PREVIEW')
    steps:
      # Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js environment with caching for faster builds
      # Uses Node.js 20 for consistency with the main storybook-deploy workflow
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm" # Caches node_modules for faster subsequent builds

      # Install all dependencies (including monorepo packages)
      # Uses npm ci for clean, reproducible installs from package-lock.json
      - name: Install dependencies
        run: npm ci
        env:
          # Prevents husky from installing git hooks during CI (not needed in CI environment)
          HUSKY: 0

      # Debug: Check if Storybook dependencies are properly installed
      - name: Debug Storybook dependencies
        run: |
          echo "Checking Storybook dependencies..."
          ls -la node_modules/@storybook/ || echo "No @storybook in root node_modules"
          ls -la packages/ui-kit-mantine/node_modules/@storybook/ || echo "No @storybook in ui-kit-mantine node_modules"
          echo "Checking for @storybook/react-vite specifically..."
          find . -name "*storybook*" -type d | head -10
          echo "Checking package.json dependencies..."
          cat packages/ui-kit-mantine/package.json | grep -A 20 "devDependencies"

      # Ensure ui-kit-mantine dependencies are properly installed
      # This step ensures that all dependencies for the ui-kit-mantine package are available
      - name: Install ui-kit-mantine dependencies
        run: |
          cd packages/ui-kit-mantine
          npm install --no-package-lock

      # Build Storybook static files
      # This creates the storybook-static directory with all HTML/CSS/JS files
      # Uses the build-storybook script defined in packages/ui-kit-mantine/package.json
      - name: Build Storybook
        if: github.event.action != 'closed'
        run: npm run build-storybook
        working-directory: packages/ui-kit-mantine

      # Deploy preview using the proven rossjrw/pr-preview-action
      # This action handles all the complexity of PR preview deployment
      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./packages/ui-kit-mantine/storybook-static
          preview-branch: gh-pages
          umbrella-dir: pr-preview
          action: auto
