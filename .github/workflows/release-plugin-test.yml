# This workflow automates the test release process using Changesets.
#
# How it works:
# 1. When you push changeset files for @recursica/figma-plugin-test to the `main` branch, this workflow
#    opens a "Version Packages" pull request. This PR contains updated package
#    versions and changelogs for test packages only.
# 2. When the "Version Packages" PR is merged, the workflow triggers again. This
#    time, it builds the test packages, publishes them to npm, and creates a
#    corresponding GitHub Release.
#
# Caching for npm dependencies and Turborepo build artifacts is enabled to
# optimize workflow speed.
name: Release Plugin Test

on:
  push:
    branches:
      - main
    paths:
      - ".changeset/**"
      - "apps/figma-plugin-test/**"
      - "package.json"
      - "package-lock.json"

jobs:
  release-test:
    name: Release Plugin Test
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create releases and tags
      pull-requests: write # To create pull requests
    steps:
      # Checks-out the repository. `fetch-depth: 0` is required for Changesets to correctly
      # determine the changes and version bumps.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Sets up Node.js and caches the npm dependency directory. This speeds up
      # subsequent `npm ci` runs. It also creates an .npmrc file for publishing.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      # Installs dependencies using a clean install.
      # HUSKY: 0 prevents Husky git hooks from running during the CI process.
      - name: Install dependencies
        run: npm ci
        env:
          # This prevents husky from installing git hooks during the CI process
          HUSKY: 0

      # Check if there are changes for the figma-plugin-test
      - name: Check for figma-plugin-test version changes
        id: check-figma-plugin-test
        run: |
          # Get current version
          current_version=$(jq -r '.version' apps/figma-plugin-test/package.json 2>/dev/null || echo "")

          # Get previous version
          previous_version=$(git show HEAD~1:apps/figma-plugin-test/package.json 2>/dev/null | jq -r '.version' 2>/dev/null || echo "")

          if [ -n "$current_version" ] && [ -n "$previous_version" ] && [ "$current_version" != "$previous_version" ]; then
            echo "has-figma-test-changes=true" >> $GITHUB_OUTPUT
            echo "figma-plugin-test-version=$current_version" >> $GITHUB_OUTPUT
            echo "‚úÖ Figma plugin test version changed: $previous_version ‚Üí $current_version"
            echo "üöÄ Preparing for TEST deployment"
          else
            echo "has-figma-test-changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No test version changes detected"
            
            # Debug info
            echo "Current version: $current_version"
            echo "Previous version: $previous_version"
          fi

      # Build test packages
      - name: Build Test
        run: |
          cd apps/figma-plugin-test
          npm run build
        env:
          VITE_RECURSICA_API_URL: ${{ secrets.RECURSICA_API_TEST }}
          VITE_RECURSICA_UI_URL: ${{ secrets.RECURSICA_API_TEST }}
          VITE_PLUGIN_PHRASE: ${{ secrets.PLUGIN_PHRASE_TEST }}
          VITE_SHOW_VERSION_BANNER: "true"

      # This action has two modes:
      # 1. If changesets are present, it creates a "Version Packages" pull request.
      # 2. When the "Version Packages" PR is merged, it runs the `publish` command.
      # The `publish` command executes the `npm run release` script, which builds,
      # publishes to npm, and creates a GitHub Release.
      # NODE_AUTH_TOKEN is used by the `npm publish` command for authentication.
      - name: Create Release Pull Request or Publish to GitHub Releases
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
